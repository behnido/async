% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeout.R
\name{async_timeout}
\alias{async_timeout}
\title{Asynchronous function call with a timeout}
\usage{
async_timeout(task, timeout, ...)
}
\arguments{
\item{task}{Asynchronous function.}

\item{timeout}{Timeout as a \code{difftime} object, or number of seconds.}

\item{...}{Additional arguments to \code{task}.}
}
\value{
A deferred value that is rejected if it is not resolved
within the specified timeout.
}
\description{
If the deferred value is not resolved before the timeout expires,
it will be rejected, with an \code{async_timeout} error.
}
\details{
Note that currently the task is not cancelled, we just don't wait for
its return value, and we ignore the return value when it is resolved
later.
}
\examples{
## You can catch the error, asynchronously
dx <- async_timeout(function() delay(1/10)$then(~ "OK"), 1/1000)$
  then(NULL, ~ "Timed out")
await(dx)

## Or synchronously
dx <- async_timeout(function() delay(1/10)$then(~ "OK"), 1/1000)
tryCatch(
  await(dx),
  async_timeout = function(e) "Timed out. :(",
  error = function(e) paste("Other error:", e$message)
)
}
\concept{async utilities}
